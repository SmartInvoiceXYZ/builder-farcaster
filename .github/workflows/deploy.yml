name: Deploy & Publish

on:
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy to Workers
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.2.2

      # Extract version from package
      - name: Read Package Version
        run: |
          version=$(jq -r .version package.json)
          echo "PACKAGE_VERSION=v${version}" >> $GITHUB_ENV

      # Set up Node.js and PNPM environment
      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '20.x'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4.0.0
        with:
          version: '9.x'
          run_install: false

      # Cache the PNPM store
      - name: Capture pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm Store
        uses: actions/cache@v4.1.2 # Action provides caching dependencies and build outputs to improve workflow execution time.
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }} # The path of the directory to cache.
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }} # An explicit key for restoring and saving the cache.
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Create .env file
      - name: Create .env File
        run: |
          cat <<EOF > .env
          NODE_ENV=${{ vars.NODE_ENV }}
          DATABASE_URL=${{ vars.DATABASE_URL }}
          BUILDER_SUBGRAPH_ETHEREUM_URL=${{ vars.BUILDER_SUBGRAPH_ETHEREUM_URL }}
          BUILDER_SUBGRAPH_BASE_URL=${{ vars.BUILDER_SUBGRAPH_BASE_URL }}
          BUILDER_SUBGRAPH_OPTIMISM_URL=${{ vars.BUILDER_SUBGRAPH_OPTIMISM_URL }}
          BUILDER_SUBGRAPH_ZORA_URL=${{ vars.BUILDER_SUBGRAPH_ZORA_URL }}
          WARPCAST_BASE_URL=${{ vars.WARPCAST_BASE_URL }}
          WARPCAST_API_KEY=${{ secrets.WARPCAST_API_KEY }}
          WARPCAST_AUTH_TOKEN=${{ secrets.WARPCAST_AUTH_TOKEN }}
          EOF

      # Install dependencies
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # Build the application
      - name: Build Application
        run: pnpm build

      # Set up SSH agent for secure connection to the server
      - name: Set Up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Deploy the application to the remote server
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.REMOTE_HOST_USER }}@${{ vars.REMOTE_HOST_NAME }} <<EOF
            if [ -d "${{ vars.REMOTE_HOST_PATH }}~${{ env.PACKAGE_VERSION }}" ]; then
              echo "Error: Directory ${{ vars.REMOTE_HOST_PATH }}~${{ env.PACKAGE_VERSION }} already exists." >&2
              exit 1
            else
              mkdir -pv ${{ vars.REMOTE_HOST_PATH }}~${{ env.PACKAGE_VERSION }}/logs
            fi
          EOF

          # Remove SQLite database files
          rm -f prisma/*.db prisma/*.db-journal

          # Synchronize files to the remote server using rsync
          rsync -avz --delete \
            --include='dist/***' \
            --include='prisma/***' \
            --include='.env' \
            --include='package.json' \
            --include='pnpm-lock.yaml' \
            --include='LICENSE' \
            --exclude='*' \
            ./ \
            ${{ vars.REMOTE_HOST_USER }}@${{ vars.REMOTE_HOST_NAME }}:${{ vars.REMOTE_HOST_PATH }}~${{ env.PACKAGE_VERSION }}

      # Install dependencies and run Prisma migrations on the server
      - name: Install Server Dependencies
        run: |
          ssh ${{ vars.REMOTE_HOST_USER }}@${{ vars.REMOTE_HOST_NAME }} <<EOF
            cp -av ${{ vars.REMOTE_HOST_PATH }}/prisma/{*.db,*.db-journal} \
              ${{ vars.REMOTE_HOST_PATH }}~${{ env.PACKAGE_VERSION }}/prisma/

            cd ${{ vars.REMOTE_HOST_PATH }}~${{ env.PACKAGE_VERSION }}
            ${{ vars.REMOTE_HOST_NODE }} --version
            ${{ vars.REMOTE_HOST_PNPM }} install --prod
            ${{ vars.REMOTE_HOST_PNPM }} prisma migrate deploy
            ${{ vars.REMOTE_HOST_PNPM }} prisma generate
          EOF

      # Update the current release symlink to point to the new release atomically
      - name: Update Current Release
        run: |
          ssh ${{ vars.REMOTE_HOST_USER }}@${{ vars.REMOTE_HOST_NAME }} <<EOF
            ln -sfn ${{ vars.REMOTE_HOST_PATH }}~${{ env.PACKAGE_VERSION }} ${{ vars.REMOTE_HOST_PATH }} # Create or update the symlink atomically
          EOF

      # Set up crontab tasks for background processes
      - name: Set Up Crontab Tasks
        run: |
          ssh ${{ vars.REMOTE_HOST_USER }}@${{ vars.REMOTE_HOST_NAME }} <<EOF
            crontab -r # Remove existing crontab tasks
            # Add crontab tasks to process proposals and propdates and consume queues
            echo "0 * * * * cd ${{ vars.REMOTE_HOST_PATH }} && ${{ vars.REMOTE_HOST_NODE }} dist/index.js process proposals >> logs/process_proposals.log 2>&1" >> cron_jobs.txt
            echo "0 * * * * cd ${{ vars.REMOTE_HOST_PATH }} && ${{ vars.REMOTE_HOST_NODE }} dist/index.js process propdates >> logs/process_propdates.log 2>&1" >> cron_jobs.txt
            echo "* * * * * cd ${{ vars.REMOTE_HOST_PATH }} && ${{ vars.REMOTE_HOST_NODE }} dist/index.js queues consume -l 10 >> logs/consume_queues.log 2>&1" >> cron_jobs.txt
            crontab cron_jobs.txt
            rm -f cron_jobs.txt
          EOF

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true
